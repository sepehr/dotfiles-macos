## Helpers

# colors
NORMAL=$(tput sgr0)
BRIGHT=$(tput bold)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
BLACK=$(tput setaf 0)
GREEN=$(tput setaf 2)
WHITE=$(tput setaf 7)
YELLOW=$(tput setaf 3)
MAGENTA=$(tput setaf 5)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)

x86() {
    arch -x86_64 $@
}

# checks if command exists with zero status code
exists() {
    command -v $1 &> /dev/null
}

# checks whether pv is installed or not
haspv() {
    $(hash pv 2>/dev/null);

    return $?
}

# makes a directory and cd to it
mkcd() {
    mkdir -p $1
    cd $1
}

# convert an image to data url
dataurl() {
    mime=$(file --mime-type -b $1)
    encoded=$(base64 $1)
    echo "data:$mime;base64,$encoded"
}


# generates a random password and stores it in the clipboard
passgen() {
    PASSGEN=`pwgen -s -1 ${1:-12}`
    echo $PASSGEN
    echo $PASSGEN | pbcopy
}

# hub/lab wrapper
# requires piotrmurach/github_cli
git() {
    if [[ "$1" != "delete" ]]; then
        /usr/local/bin/git $@
        # lab $@
        # hub $@
        return
    fi

    if [[ -z "$2" ]]; then
        echo "No repo name given."
        return 1
    fi

    if ! exists gcli; then
        echo "gcli is not available. run: gem install github_cli"
        return 1
    fi

    GCLI_USER=$(gcli config user.login)
    if [[ -z "$GCLI_USER" ]]; then
        echo "gcli's user.login config is not set. see: gcli help config"
        return 1
    fi

    if ! confirm "Deleting $GCLI_USER/$2 repo... sure? (y/N)"; then
        print "\nPwehhh!"
        return 1
    fi

    gcli repo delete $GCLI_USER $2
}

# git prev commit
git-prev() {
    git checkout HEAD~
}

# git next commit
git-next() {
    git log --reverse --pretty=%H master | grep -A 1 $(git rev-parse HEAD) | tail -n1 | xargs git checkout
}

# drop remote merged branches
git-cleanup() {
    git branch -r --merged | grep -v 'master' | grep -v 'dev' | sed 's/origin\///' | xargs -n 1 git push --delete origin
}

# cherrypick from another repo
git-cherry-pick-from() {
    git --git-dir=$(realpath $1/.git) format-patch -k -1 --stdout $2 | git am -3 -k
}

gftch() {
    if [[ -z "$1" ]]; then
        echo "No branch name given."
        return 1
    fi

    git fetch origin "$1"
    git checkout "$1"
}

# todolist wrapper
t() {
    if [[ -f "./.todos.json" || "$1" == "init" ]]; then
        todolist $@
        return
    fi

    WDIR=`pwd`
    cd $HOME

	todolist $@

	cd $WDIR
}

# vagrant wrapper for homestead
hms() {
    cd ~/.homestead

    if [[ "$1" == "ssh" ]]; then
        vagrant ssh -- -t "cd projects/${2:-}; /bin/bash"
    else
        vagrant $*
    fi

    cd -
}

# fixes file/dir permissions
fixperms() {
    if [[ -z "$1" ]]; then
        echo "Please specify the path to directory."
        return
    fi

    confirm "Are sure that you want to fix permissions on \"$1\"? [y/N]" || return

    # chmod all files to 644
    # chmod all dires to 755
    echo ""
    echo "== Fixing file permissions..."
    echo "`find $1 -type f -print -exec chmod u=rw,g=r,o=r {} \; | wc -l` files processed."
    echo "`find $1 -type d -print -exec chmod u=rwx,g=rx,o=rx {} \; | wc -l` directories processed."

    # Remove "com.apple.quarantine" flag (OSX)
    echo ""
    echo "== Removing files from OSX quarantine, if any..."
    find $1 -exec xattr -d com.apple.quarantine {} 2&>1 /dev/null \;
    echo "    Done!"

    # Unlock (OSX)
    echo ""
    echo "== Unlocking locked files, if any..."
    echo "    Done!"
    chflags -R nouchg $1
    chflags -R noschg $1
}

# makes a mysql database
dbmk() {
	if [[ -z "$1" ]]; then
		echo 'Usage: dbmk {database}'
		return 1
	fi

    mysql -uroot -p -e "drop database if exists $1; create database $1 default character set utf8 default collate utf8_unicode_ci"
}

# drops a mysql database
dbrm() {
	if [[ -z "$1" ]]; then
        echo 'Usage: dbrm {database}'
        return 1
    fi

	mysql -uroot -p -e "drop database if exists $1"
}

# truncates all tables in a mysql database
dbtruncate() {
    if [[ -z "$3" ]]; then
        echo 'Usage: dbtruncate {database} {user} {password}'
        return 1
    fi

    mysql -u$2 -p$3 -Nse 'show tables' $1 | \
        while read table; do
            mysql -u$2 -p$3 \
                -e "SET FOREIGN_KEY_CHECKS = 0; truncate table $table; SET FOREIGN_KEY_CHECKS = 1;" $1 > /dev/null 2>&1;
        done
}

# creates database user
dbmkusr() {
    if [[ -z "$2" ]]; then
        echo 'Usage: dbmkusr {user} {password}'
        return 1
    fi

    mysql -uroot -p -e "drop user '$1'@'%'; create user '$1'@'%' identified by '$2'"
}

# removes database user
dbrmusr() {
    if [[ -z "$1" ]]; then
        echo 'Usage: dbrmusr {user}'
        return 1
    fi

    mysql -uroot -p -e "drop user '$1'@'%'"
}

# grants database permissions to a user
dbgrant() {
    if [[ -z "$2" ]]; then
        echo 'Usage: dbgrant {user} {database}'
        return 1
    fi

    mysql -uroot -p -e "grant all on $2.* to '$1'@'%'; flush privileges"
}

# create a user and grant database permissions to it
dbmkusrgrant() {
    if [[ -z "$3" ]]; then
        echo 'Usage: dbmkgrant {user} {password} {database}'
        return 1
    fi

    dbmkusr $1 $2
    dbgrant $1 $3
}

# list databases
dbls() {
    mysql -uroot -p -e "show databases;"
}

# database exporter
dbexport() {
    if [[ -z "$2" ]]; then
        echo 'Usage: dbexport {user} {password} [{database}] [{filepath}]'
        return 1
    fi

    DUMP=${3:-"mysqldump"}
    DB=${3:-"--all-databases"}
    FILE=${4:-"$HOME/Downloads/$DUMP.sql.gz"}

    echo "Exporting database(s) to '$FILE'"

    if [[ -z "$3" ]]; then
        SIZE_QUERY="select ceil(sum(data_length) * 0.8) as size from information_schema.tables"
    else
        SIZE_QUERY="select ceil(sum(data_length) * 0.8) as size from information_schema.tables where TABLE_SCHEMA = \"$DB\""
    fi

    if exists pv; then
        ADJUSTED_SIZE=$(mysql --vertical -u$1 -p$2 -e "$SIZE_QUERY" 2>/dev/null | grep 'size' | awk '{print $2}')
        HUMAN_READABLE_SIZE=$(gnumfmt --to=iec-i --suffix=B --format="%.3f" $ADJUSTED_SIZE)

        echo "Estimated uncompressed size: $HUMAN_READABLE_SIZE"
        mysqldump -u$1 -p$2 $DB --skip-lock-tables 2>/dev/null | pv --size=$ADJUSTED_SIZE | gzip > "$FILE"
    else
        mysqldump -u$1 -p$2 $DB --skip-lock-tables 2>/dev/null | gzip > "$FILE"
    fi

    echo "Done."
}

# database importer
dbimport() {
    if [[ -z "$2" ]]; then
        echo 'Usage: dbimport {user} {password} [{database}] [{filepath}]'
        return 1
    fi

    DUMP=${3:-"mysqldump"}
    DB=${3:-""}
    FILE=${4:-"$HOME/Downloads/$DUMP.sql.gz"}

    echo "Importing databases from '$FILE'"

    if exists pv; then
        pv "$FILE" --progress --eta | zcat | mysql -u$1 -p$2 $DB 2>/dev/null
    else
        cat "$FILE" | zcat | mysql -u$1 -p$2 $DB 2>/dev/null
    fi

    echo "Done."
}

# makes the file/dir apache writeable
a2mkw() {
    WWW_USER=`ps aux | egrep 'apache|httpd' | awk '{ print $1 }' | sed '1 d' | sort | uniq | awk '{print}' ORS=' ' | sed "s/\b$(whoami)\|root\b//g" | xargs`

    echo ""
    echo "== Setting up writables..."
    echo "= Webserver is running by \"$WWW_USER\""

    chgrp -v -R $WWW_USER $1
    chmod -v -R u=rwx,g=rwx,o=rx $1
    echo ""
}

# php switcher
phpsw() {
    php_versions=('5.6' '7.1' '7.2' '7.3')

    if [[ -z "$1" ]]; then
        echo 'Usage: phpsw {version}'
        echo "Supported versions: $php_versions"
        return 1
    fi

    if [[ ! " ${php_versions[*]} " == *"$1"* ]]; then
        print "Given php version is not supported. Supported versions: $php_versions"
        return 1
    fi

    print "Switching to php@$1, it may take a few moments..."

    if exists valet; then
        valet stop
    fi

    for version in "${php_versions[@]}"; do
        sudo brew services stop "php@$version"
        brew unlink "php@$version"
    done

    brew link "php@$1" --force

    if exists valet; then
        valet start
    fi

    if exists apachectl; then
        apache_config='/usr/local/etc/httpd/httpd.conf'

        # comment out all php module
        for version in "${php_versions[@]}"; do
            major=$(echo $version | cut -d. -f1)
            directive="LoadModule php${major}_module /usr/local/opt/php@$version/lib/httpd/modules/libphp$major.so"
            directive_escaped=$(echo $directive | sed 's/\//\\\//g')

            if grep -q "$directive" "$apache_config"; then
                if ! grep -q "#$directive" "$apache_config"; then
                    # comment out
                    sed -i.bak "s/$directive_escaped/\#$directive_escaped/g" $apache_config
                fi
            else
                # add as commented to the beginning of the file
                sed -i.bak "1i\
#$directive_escaped" $apache_config
            fi
        done

        # uncomment the one
        major=$(echo $1 | cut -d. -f1)
        directive="LoadModule php${major}_module /usr/local/opt/php@$1/lib/httpd/modules/libphp$major.so"
        directive_escaped=$(echo $directive | sed 's/\//\\\//g')
        sed -i.bak "s/\#$directive_escaped/$directive_escaped/g" $apache_config

        sudo apachectl restart
    fi

    php -v
}

# "vagrant halt all" support
vagrant() {
    if [[ $@ == "halt all" ]]; then
        /usr/local/bin/vagrant global-status | grep running | colrm 8 | xargs -L 1 -t /usr/local/bin/vagrant halt
    else
        /usr/local/bin/vagrant "$@"
    fi
}

# scp continue through rsync
scpcontinue() {
    if [[ -z "$2" ]]; then
        echo 'Usage: scpcontinue {local-file} {remote-file}'
        return 1
    fi

    rsync --partial --progress --rsh=ssh $1 $2
}

# dock icon hider
nodock() {
    defaults write "$1Contents/Info" LSUIElement 1
}

lidlog() {
    (pmset -g log|grep -e " Sleep  " -e " Wake  "; log show | grep -e "System Sleep" -e " Wake reason:") | more
}

dadjoke() {
    curl -H "Accept: text/plain" https://icanhazdadjoke.com/
    echo ""
}

ntigbot_pid() {
    aws dynamodb scan --region=eu-central-1 --profile=ntigbot-deployer --table-name=ntigbot-prod-players --filter-expression="player_id = :pid" --expression-attribute-values="{\":pid\":{\"N\":\"$1\"}}"
}

prox() {
    port=${1:-1087}

    if [[ "$port" == "off" ]]; then
        unset http_proxy
        unset https_proxy
        prox st
    elif [[ "$port" == "st" ]]; then
        echo "HTTP: ${http_proxy:-N/A}"
        echo "HTTPS: ${https_proxy:-N/A}"
        ipinfo
    else
        export http_proxy="http://127.0.0.1:$port"
        export https_proxy="http://127.0.0.1:$port"
        prox st
    fi
}

